properties(
        [
                parameters(
                    [
                        string(description: 'fedmsg msg', name: 'CI_MESSAGE'),
                        string(defaultValue: '^(f26)$', description: 'fedora branch targets', name: 'TARGETS'),
                        string(defaultValue: 'ci-pipeline', description: 'Main project repo', name: 'PROJECT_REPO'),
                        string(defaultValue: 'org.centos.prod', description: 'main topic to publish on', name: 'MAIN_TOPIC'),
                    ]
                ),
                pipelineTriggers(
                        [[$class: 'CIBuildTrigger', checks: [], providerName: 'fedora-fedmsg', selector: 'topic = "org.fedoraproject.prod.git.receive"']]
                )
        ]
)

def fedmsg_properties = []
def job_properties = []
def messageProperties = ""
def messageContent = ""

node('master') {
    ansiColor('xterm') {
        timestamps {
            //def current_stage = "ci-pipeline-rpmbuild-trigger"
            try {
                deleteDir()
                stage('ci-pipeline-rpmbuild-trigger') {
                    env.basearch = "x86_64"

                    // Set default main topic for messaging
                    if ((env.MAIN_TOPIC == null) || ("${env.MAIN_TOPIC}" == "")) {
                        env.MAIN_TOPIC = "org.centos.prod"
                    }

                    // SCM
                    dir('ci-pipeline') {
                        git 'https://github.com/CentOS-PaaS-SIG/ci-pipeline'
                    }

                    // Python script to parse the ${CI_MESSAGE}
                    writeFile file: "${env.WORKSPACE}/parse_fedmsg.py",
                            text: "#!/bin/env python\n" +
                                    "import json\n" +
                                    "import sys\n\n" +
                                    "reload(sys)\n" +
                                    "sys.setdefaultencoding('utf-8')\n" +
                                    "message = json.load(sys.stdin)\n" +
                                    "if 'commit' in message:\n" +
                                    "    msg = message['commit']\n\n" +
                                    "    for key in msg:\n" +
                                    "        print \"fed_%s=%s\" % (key, msg[key])\n"

                    // Parse the ${CI_MESSAGE}
                    sh '''
                        #!/bin/bash
                        set -xuo pipefail

                        chmod +x ${WORKSPACE}/parse_fedmsg.py

                        # Write fedmsg fields to a file to inject them
                        if [ -n "${CI_MESSAGE}" ]; then
                            echo ${CI_MESSAGE} | ${WORKSPACE}/parse_fedmsg.py > fedmsg_fields.txt
                            sed -i '/^\\\\s*$/d' ${WORKSPACE}/fedmsg_fields.txt
                            grep fed ${WORKSPACE}/fedmsg_fields.txt > ${WORKSPACE}/fedmsg_fields.txt.tmp
                            mv ${WORKSPACE}/fedmsg_fields.txt.tmp ${WORKSPACE}/fedmsg_fields.txt
                        fi
                    '''

                    // Load fedmsg fields as environment variables
                    def fedmsg_map = readProperties file: "${env.WORKSPACE}/fedmsg_fields.txt"
                    fedmsg_properties = fedmsg_map.collect { key, value -> return key+'='+value }
                    withEnv(fedmsg_properties) {
                        // Check if package is in the package list for fedora-atomic host
                        sh '''
                            set +e
                            branch=${fed_branch}
                            if [ "${branch}" = "master" ]; then
                              branch="rawhide"
                            fi


                            echo "topic=${MAIN_TOPIC}.ci.pipeline.package.queued" >> ${WORKSPACE}/job.properties
                            touch ${WORKSPACE}/trigger.downstream
                            exit
                        '''

                        def jobproperties_map = readProperties file: "${env.WORKSPACE}/job.properties"
                        job_properties = jobproperties_map.collect { key, value -> return key+'='+value }
                        withEnv(job_properties) {
                            // Populate message Properties
                            messageProperties = "topic=${env.topic}\n" +
                                    "build_url=${BUILD_URL}\n" +
                                    "build_id=${BUILD_ID}\n" +
                                    "branch=${env.branch}\n" +
                                    "ref=fedora/${env.branch}/x86_64/atomic-host\n" +
                                    "rev=${env.fed_rev}\n" +
                                    "repo=${env.fed_repo}\n" +
                                    "namespace=${env.fed_namespace}\n" +
                                    "username=fedora-atomic\n" +
                                    "test_guidance=''\n" +
                                    "status=${currentBuild.currentResult}"
                            messageContent = ''

                        }
                    }
                }
            } catch (e) {
                // Send failure message for appropriate topic
                throw e
            } finally {
                withEnv(fedmsg_properties) {
                    withEnv(job_properties) {
                        currentBuild.displayName = "Build#: ${env.BUILD_NUMBER} - Branch: ${env.branch} - Package: ${env.fed_repo}"
                        currentBuild.description = "${currentBuild.currentResult}"

                        step([$class: 'ArtifactArchiver', allowEmptyArchive: true, artifacts: 'trigger.downstream,*.txt,*.properties,*.props,*.groovy', excludes: '**/*.example', fingerprint: true])
                        if (fileExists("${env.WORKSPACE}/trigger.downstream")) {
                            echo "Trigger downstream pipeline ci-pipeline-2-0"
                            echo "CI_MESSAGE: ${env.CI_MESSAGE}"
                            echo "TARGET_BRANCH: ${env.fed_branch}"
                            echo "MAIN_TOPIC: ${env.MAIN_TOPIC}"
                            build job: "duo-pipeline", parameters: [string(name: 'CI_MESSAGE', value: "${env.CI_MESSAGE}"), string(name: 'TARGET_BRANCH', value: "${env.fed_branch}"), string(name: 'PROJECT_REPO', value: 'ci-pipeline'), string(name: 'MAIN_TOPIC', value: 'org.centos.test'), string(name: 'MSG_PROVIDER', value: 'fedora-fedmsg')], wait: false
                        }
                    }
                }
            }
        }
    }
}

def convertProps(file1, file2) {
    def command = $/awk -F'=' '{print "env."$1"=\""$2"\""}' ${file1} > ${file2}/$
    sh command
}

def sendMessage(msgProps, msgContent) {
    sendCIMessage messageContent: msgContent,
            messageProperties: msgProps,

            messageType: 'Custom',
            overrides: [topic: "${env.topic}"],
            providerName: 'fedora-fedmsg'
}
