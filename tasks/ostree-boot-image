#!/bin/sh

set -x
env

# Find the base dir
base_dir="$(dirname $0)/.."

if [ "${branch}" = "master" -o "${branch}" = "rawhide" ]; then
    branch="rawhide"
    VERSION="rawhide"
else
    VERSION=$(echo $branch | sed -e 's/[a-zA-Z]*//')
fi

export ara_location=$(python -c "import os,ara; print(os.path.dirname(ara.__file__))")
export ANSIBLE_CALLBACK_PLUGINS=$ara_location/plugins/callbacks
export ANSIBLE_ACTION_PLUGINS=$ara_location/plugins/actions
export ANSIBLE_LIBRARY=$ara_location/plugins/modules


REF="fedora/${branch}/x86_64/atomic-host"

mkdir -p logs

for v in images; do
    rsync --delete --stats -a fedora-atomic@artifacts.ci.centos.org::fedora-atomic/${branch}/${v}/ ${v}/
done

currentdir=$(pwd)

# Create directory for temporary files
tmpdir=$(mktemp -d)

# Kill backgrounded jobs on exit
function clean_up {
    ansible-playbook -i hosts ci-pipeline/playbooks/setup-libvirt-image.yml -l ostree_compose_slave_baremetal -e 'state=absent'
    kill $(jobs -p)
    sudo rm -rf $tmpdir
    ara generate junit - > $currentdir/logs/ansible_xunit.xml
    rm -rf $HOME/.ara
    cp -rp $currentdir/packagevolume/artifacts $currentdir/logs
    rm -rf $currentdir/packagevolume
}
trap clean_up EXIT SIGHUP SIGINT SIGTERM

if [ -d "images" ]; then
    if [ -d "images/latest-atomic.qcow2" ]; then
        # Use symlink if it exists
        IMG_URL="http://artifacts.ci.centos.org/artifacts/fedora-atomic/${branch}/images/latest-atomic.qcow2"
    else
        # Find the last image we pushed
        prev_img=$(ls -tr images/*.qcow2 | tail -n 1)
        IMG_URL="http://artifacts.ci.centos.org/artifacts/fedora-atomic/${branch}/$prev_img"
    fi
fi

# If image2boot is defined use that image, but if not fall back to the
# previous image built
bootimage=${image2boot:-$IMG_URL}

if ! [ -f ~/.ssh/id_rsa ]; then
    ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ''
    cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
fi

pubkey=$(cat ~/.ssh/id_rsa.pub)

mkdir -p host_vars
cat << 'EOF' > host_vars/ostree_compose_slave_baremetal.yml
qemu_img_path: /var/lib/libvirt/images
bridge: virbr0
libvirt_systems:
 atomic-host-fedoraah:
   admin_passwd: $5$uX5x24soDWv3G2TH$BYxhEq4HmxjKmyChV0.VTpqxfhqMaRk8LCr34KOg2C7
   memory: 3072
   disk: 10G
EOF
cat << EOF >> host_vars/ostree_compose_slave_baremetal.yml
   img_url: $bootimage
   admin_ssh_rsa: $pubkey
EOF
cat << EOF > hosts
[libvirt-hosts]
ostree_compose_slave_baremetal ansible_ssh_host=127.0.0.1 ansible_user=builder become=true
EOF
# Install net-tools
sudo yum -y install net-tools
# Start test VM
ansible-playbook -i hosts ci-pipeline/playbooks/setup-libvirt-image.yml -l ostree_compose_slave_baremetal -e 'state=present'

PROVISION_STATUS=$?
if [ "$PROVISION_STATUS" != 0 ]; then
    echo "ERROR: Provisioning\nSTATUS: $PROVISION_STATUS"
    exit 1
fi

# Get libvirt IP
IP=$(cat libvirt-hosts | tail -n 1 | cut -d '=' -f 2)

cat << EOF > inventory
[ostree_compose_slave]
$IP ansible_user=admin ansible_ssh_pass=admin ansible_become=true ansible_become_pass=admin
EOF

ansible-playbook -i inventory ci-pipeline/playbooks/ostree-boot-verify.yml -l ostree_compose_slave -e "commit=$commit" -v

BOOT_STATUS=$?
if [ "$BOOT_STATUS" != 0 ]; then
    echo "ERROR: Provisioning\nSTATUS: $BOOT_STATUS"
    exit 1
fi

# If image2boot is defined then symlink it as latest
if [ -n "$image2boot" ]; then
    pushd images
    ln -sf $(basename $image2boot) latest-atomic.qcow2
    popd
    # rsync the images directory back if we update the symlink
    for v in images; do
        rsync --delete --stats -a ${v}/ fedora-atomic@artifacts.ci.centos.org::fedora-atomic/${branch}/${v}/
    done
fi

# Temporarily put package level test execution here
pushd ci-pipeline/config/Dockerfiles/package_tests/ansible
sudo docker build -t package-test .
popd

# Set up mounted volume
mkdir $currentdir/packagevolume
cp inventory $currentdir/packagevolume
cp ~/.ssh/id_rsa $currentdir/packagevolume/ssh_key

# Run test
sudo docker run --privileged -v $currentdir/packagevolume:/tmp -t -e package=${fed_repo} package-test
RUNTEST_STATUS=$?
if [ "$RUNTEST_STATUS" != 0 ]; then
    echo -e "ERROR: RUNTEST\nSTATUS: $RUNTEST_STATUS"
    #exit 1
    # Still exit 0 so package level testing failure doesnt result in
    # sending message saying failed to boot image
    exit 0
fi
